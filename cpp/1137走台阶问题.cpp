#include <stdio.h>  //利用递归的思想，并用数组存储上每级台阶所需要的方式，计算时只需要累加便可以得到下一级台阶所需要的方式数量
int main()          // 相当于每次累加，如，4级台阶，已结上了1级，那么再加上上3级台阶的方式数量，若已经上了2级台阶，那么再加上上2级台阶数量
{                   // 若已上了3级台阶，那么只需要加上上1级台阶的数量
    int i, a[ 45 ],
        n;  // 从此算出第i级台阶上楼方式，并存储，以便后续计算上台阶数时使用数据递推下去
    while ( scanf( "%d", &n ) != EOF ) {
        a[ 1 ] = 1;  // 因为只定义有三种上台阶方式，所以定义上一级有1一种方式
        a[ 2 ] = 2;  // 上2级有2种方式
        a[ 3 ] = 4;  // 上3级有四种方式，其中i代表总的上台阶数，数组表示，第i个数据存储的是到这级台阶的方式数量
        for ( i = 4; i <= n; i++ ) {
            a[ i ] = a[ i - 1 ] + a[ i - 2 ] + a[ i - 3 ];  // 利用递归累加的方法，当大于4级台阶时，实际就是1级台阶方法加上3级台阶方法加上2级台阶方法，因为每次只能上1/2/3级台阶
        }  // 因此每次计数只需要前3次已知的上台阶数方式，依次开始每次上1级台阶的方式加上2级台阶方式加上上3级台阶方式，并将其存储如每次每个总台阶数的数组中
        printf( "%d\n", a[ n ] );  // 输出数组中，代表那个总台阶数的存储的上台阶方式数量
    }
    return 0;
}
